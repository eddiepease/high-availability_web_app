Description:
    This file was written by Eddie Pease (eddiepease1@gmail.com) and deploys the following services

    2 Security Groups (one for EC2 instances, one for ALB)
    Application Load Balancer (with Listeners)
    Target Group
    Launch Config + Autoscaling Group
    Instance Role

Parameters:
    # whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
    EnvironmentName:
        Type: String
        Description: Name for the whole project
    MaxAutoScaleSize:
        Type: Number
        Description: Maximum number of EC2 instances for autoscaling
    MinAutoScaleSize:
        Type: Number
        Description: Minimum number of EC2 instances for autoscaling
    AppSize:
        Type: Number
        Description: Size of the application in GB

Resources:

    SecGroupEC2:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: http and ssh access to web server
            SecurityGroupEgress:
                -   CidrIp: 0.0.0.0/0
                    FromPort: 0
                    IpProtocol: tcp
                    ToPort: 65535
            SecurityGroupIngress:
                -   CidrIp: 0.0.0.0/0
                    FromPort: 80
                    IpProtocol: tcp
                    ToPort: 80
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"

    SecGroupLB:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: http access to load balancer
            SecurityGroupIngress:
                -   CidrIp: 0.0.0.0/0
                    FromPort: 80
                    IpProtocol: tcp
                    ToPort: 80
            SecurityGroupEgress:
                -   CidrIp: 0.0.0.0/0
                    FromPort: 80
                    IpProtocol: tcp
                    ToPort: 80
            VpcId:
              Fn::ImportValue:
                !Sub "${EnvironmentName}-VPCID"

    ApplicationLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            SecurityGroups:
                - !Ref SecGroupLB
            Subnets:
                - Fn::ImportValue:
                    !Sub "${EnvironmentName}-PUB1"
                - Fn::ImportValue:
                    !Sub "${EnvironmentName}-PUB2"
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName

    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward
            LoadBalancerArn: !Ref ApplicationLB
            Port: 80
            Protocol: HTTP

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward
            Conditions:
                -   Field: path-pattern
                    Values: [/]
            ListenerArn: !Ref Listener
            Priority: 1

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckEnabled: true
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 8
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
            UnhealthyThresholdCount: 5
            VpcId:
                Fn::ImportValue:
                    !Sub "${EnvironmentName}-VPCID"

    LaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        # DependsOn: IGWAttachment
        Properties:
            # AssociatePublicIpAddress: true
            BlockDeviceMappings:
                -   DeviceName: /dev/sdk
                    Ebs:
                        VolumeSize: !Ref AppSize
                        VolumeType: standard
            IamInstanceProfile: !Ref ProfileWithRolesForOurApp
            ImageId: ami-06f2f779464715dc5
            InstanceMonitoring: true
            InstanceType: t3.small
            # LaunchConfigurationName: !Sub ${EnvironmentName} Launch Config 1
            SecurityGroups:
                - !Ref SecGroupEC2
            UserData:
                Fn::Base64: !Sub |
                        #!/bin/bash
                        apt-get update -y
                        apt-get install unzip awscli -y
                        apt-get install apache2 -y
                        systemctl start apache2.service
                        cd /var/www/html
                        aws s3 cp s3://udacity-demo-1/udacity.zip .
                        unzip -o udacity.zip

    AutoScalingGrp:
        Type: AWS::AutoScaling::AutoScalingGroup
        # DependsOn: IGWAttachment
        Properties:
            # AutoScalingGroupName: !Sub ${EnvironmentName} AutoScaling Group
            HealthCheckGracePeriod: 300
            HealthCheckType: EC2
            LaunchConfigurationName: !Ref LaunchConfig
            MaxSize: !Ref MaxAutoScaleSize
            MinSize: !Ref MinAutoScaleSize
            TargetGroupARNs:
                - !Ref TargetGroup
            VPCZoneIdentifier:
                - Fn::ImportValue:
                    !Sub "${EnvironmentName}-PRIV1"
                - Fn::ImportValue:
                    !Sub "${EnvironmentName}-PRIV2"

    S3fromEC2Role:
        Type: AWS::IAM::Role
        Properties:
            RoleName: UdacityS3ReadOnlyEC2
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    -   Effect: Allow
                        Principal:
                            Service:
                                - ec2.amazonaws.com
                        Action:
                            - 'sts:AssumeRole'
            Policies:
                -   PolicyName: UdacityS3ReadOnly
                    PolicyDocument:
                        Statement:
                            -   Action:
                                    - s3:GetObject
                                    - s3:GetObjectVersion
                                    - s3:ListObjects
                                Effect: Allow
                                Resource: '*'

    ProfileWithRolesForOurApp:
        Type: AWS::IAM::InstanceProfile
        Properties:
            InstanceProfileName: UdacityS3ReadOnlyEC2
            Roles:
                -   !Ref S3fromEC2Role

Outputs:
    LoadBalancerURL:
        Description: Public URL for load balancer
        Value: !GetAtt ApplicationLB.DNSName
        Export:
            Name: !Sub ${EnvironmentName}-URL
